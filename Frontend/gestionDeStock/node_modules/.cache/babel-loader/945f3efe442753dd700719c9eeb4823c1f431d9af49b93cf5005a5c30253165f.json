{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GStock\\\\Frontend\\\\gestionDeStock\\\\src\\\\components\\\\Stock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Button, Table } from 'react-bootstrap'; // Par exemple, utilisez la bibliothèque react-bootstrap pour les composants UI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stock = () => {\n  _s();\n  // État pour stocker les données des articles\n  const [stockData, setStockData] = useState([]);\n\n  // Utilisez useEffect pour charger les données du stock à partir de l'API dès que le composant est monté\n  useEffect(() => {\n    // Code pour charger les données du stock depuis l'API\n    fetchStockData(); // Appelez une fonction qui récupère les données du stock\n  }, []);\n\n  // Fonction pour charger les données du stock depuis l'API\n  const fetchStockData = async () => {\n    try {\n      // Effectuez une requête pour récupérer les données du stock depuis l'API\n      const response = await fetch('http://localhost:3001/stock');\n      if (response.ok) {\n        const data = await response.json();\n        setStockData(data); // Mettez à jour l'état avec les données récupérées\n      } else {\n        console.error('Erreur lors de la récupération des données du stock.');\n      }\n    } catch (error) {\n      console.error('Une erreur s\\'est produite :', error);\n    }\n  };\n\n  // Fonction pour afficher les données du stock dans une liste ou un tableau\n  const renderStockItems = () => {\n    return stockData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: item.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: item.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: item.quantity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), ' ', /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderStockItems()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(Stock, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n_c = Stock;\nexport default Stock;\nvar _c;\n$RefreshReg$(_c, \"Stock\");","map":{"version":3,"names":["React","useState","useEffect","Button","Table","jsxDEV","_jsxDEV","Stock","_s","stockData","setStockData","fetchStockData","response","fetch","ok","data","json","console","error","renderStockItems","map","item","index","children","id","fileName","_jsxFileName","lineNumber","columnNumber","name","quantity","variant","striped","bordered","hover","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/Desktop/GStock/Frontend/gestionDeStock/src/components/Stock.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, Table } from 'react-bootstrap'; // Par exemple, utilisez la bibliothèque react-bootstrap pour les composants UI\r\n\r\nconst Stock = () => {\r\n    // État pour stocker les données des articles\r\n    const [stockData, setStockData] = useState([]);\r\n\r\n    // Utilisez useEffect pour charger les données du stock à partir de l'API dès que le composant est monté\r\n    useEffect(() => {\r\n        // Code pour charger les données du stock depuis l'API\r\n        fetchStockData(); // Appelez une fonction qui récupère les données du stock\r\n    }, []);\r\n\r\n    // Fonction pour charger les données du stock depuis l'API\r\n    const fetchStockData = async () => {\r\n        try {\r\n            // Effectuez une requête pour récupérer les données du stock depuis l'API\r\n            const response = await fetch('http://localhost:3001/stock');\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setStockData(data); // Mettez à jour l'état avec les données récupérées\r\n            } else {\r\n                console.error('Erreur lors de la récupération des données du stock.');\r\n            }\r\n        } catch (error) {\r\n            console.error('Une erreur s\\'est produite :', error);\r\n        }\r\n    };\r\n\r\n    // Fonction pour afficher les données du stock dans une liste ou un tableau\r\n    const renderStockItems = () => {\r\n        return stockData.map((item, index) => (\r\n            <tr key={index}>\r\n                <td>{item.id}</td>\r\n                <td>{item.name}</td>\r\n                <td>{item.quantity}</td>\r\n                {/* Ajoutez d'autres colonnes pour d'autres propriétés des articles si nécessaire */}\r\n            </tr>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Stock Management</h1>\r\n            <Button variant=\"primary\">Add Item</Button>{' '}\r\n            {/* Ajoutez un bouton pour ajouter un nouvel article au stock */}\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Name</th>\r\n                        <th>Quantity</th>\r\n                        {/* Ajoutez d'autres colonnes pour d'autres propriétés des articles si nécessaire */}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderStockItems()}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Stock;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}